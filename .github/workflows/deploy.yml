name: Deploy to remove server

on:
    push:
        branches:
            - deploy

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
        
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Install Docker Compose
          run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version 

        - name: Build containers
          run: docker-compose -f docker-compose.prod.yml build
        - name: Save frontend image
          run: docker save frontend_live:latest -o frontend_live.tar
        - name: Save API Image
          run: docker save api_live:latest -o api_live.tar
        - name: Save postgres Image
          run: docker save postgres_live:latest -o postgres_live.tar
        
        - name: Setup SSH
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_REMOTE_IP }} >> ~/.ssh/known_hosts
        
        - name: Install rsync
          run: sudo apt-get install -y rsync
        - name: Deploy via rsync
          run: |
            rsync -avz --no-times --no-perms --no-group -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no" frontend_live.tar api_live.tar postgres_live.tar docker-compose.deploy.yml docker-compose.migrate.yml docker-compose.console.yml  ${{secrets.SSH_USER}}@${{secrets.SSH_REMOTE_IP}}:${{secrets.SSH_REMOTE_PATH}}

        - name: Deploy container
          run: |
            ssh -o StrictHostKeyChecking=no -p ${{secrets.SSH_PORT}} ${{secrets.SSH_USER}}@${{secrets.SSH_REMOTE_IP}} << 'EOF'
            cd ${{secrets.SSH_BACKEND_REMOTE_PATH}}            
            docker-compose -f docker-compose.prod.yml down -v  || true
            docker load -i postgres_live.tar
            docker load -i api_live.tar
            docker load -i frontend_live.tar 
            rm -rf frontend_live.tar api_live.tar postgres_live.tar
 
            docker-compose -f docker-compose.deploy.yml up -d
            docker system prune -f 
        