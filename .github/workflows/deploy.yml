name: Deploy to remove server

on:
    push:
        branches:
            - staging

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
        
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
  
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
  
        - name: Build and push docker images with compose
          run: |
            docker compose -f docker-compose.prod.yml build
            docker compose -f docker-compose.prod.yml push
        
        - name: Setup SSH
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_REMOTE_IP }} >> ~/.ssh/known_hosts
        
        - name: Install rsync
          run: sudo apt-get install -y rsync
        - name: Deploy via rsync
          run: |
            rsync -avz --no-times --no-perms --no-group -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no"  docker-compose.deploy.yml .default.env  ${{secrets.SSH_USER}}@${{secrets.SSH_REMOTE_IP}}:${{secrets.SSH_REMOTE_PATH}}

        - name: Rebuild containers
          run: |
            ssh -o StrictHostKeyChecking=no -p ${{secrets.SSH_PORT}} ${{secrets.SSH_USER}}@${{secrets.SSH_REMOTE_IP}} << EOF
            cd ${{secrets.SSH_REMOTE_PATH}}            
            
            
            echo "${{secrets.DOCKERHUB_TOKEN}}" | docker login -u "${{secrets.DOCKERHUB_USERNAME}}" --password-stdin
            docker compose -f docker-compose.deploy.yml down --rmi all -v  || true
  
            docker compose -f docker-compose.deploy.yml --env-file .default.env  build
            docker compose -f docker-compose.deploy.yml --env-file .default.env  up -d
            docker compose -f docker-compose.deploy.yml --env-file .default.env exec products-api dotnet console/Backend.Core.Console.dll --update-db
            docker compose -f docker-compose.deploy.yml --env-file .default.env exec products-api dotnet console/Backend.Core.Console.dll --fetch

            docker system prune -f 
 