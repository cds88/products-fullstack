name: Deploy to staging remote server on a distinct developer branch

on:
  push:
    branches:
      - staging/**

jobs:
  get-environment-variables:
    runs-on: ubuntu-latest
    outputs:
      subdomain_name: ${{ steps.set_subdomain.outputs.subdomain_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Retrieve subdomain from branch
        id: set_subdomain
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}      
          SUBDOMAIN_NAME=$(echo "${BRANCH_NAME}" | sed 's/staging\///g')

          echo "subdomain_name=${SUBDOMAIN_NAME}" >> $GITHUB_OUTPUT
  deploy:
    name: Build and deploy to staging branch
    needs:
      - get-environment-variables
    
    runs-on: ubuntu-latest
    env:
        TAG_NAME: ${{needs.get-environment-variables.outputs.subdomain_name}}
        STAGING_DIRECTORY: ${{format('{0}/{1}', secrets.SSH_STAGING_ROOT_PATH, needs.get-environment-variables.outputs.subdomain_name)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push docker images with compose                  
        run: |
          printf "\nDOCKER_IMAGE_TAG=${TAG_NAME}\n" >> .default.env
        
          
        
          echo "${{env.STAGING_DIRECTORY}}" > "test_${TAG_NAME}.txt"
          
        #   docker compose -f docker-compose.prod.yml --env-file .default.env build
        #   docker compose -f docker-compose.prod.yml --env-file .default.env push
      - name: Setup SSH
        run: |
            mkdir -p ~/.ssh
            echo "${{secrets.SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -p ${{secrets.SSH_PORT}} ${{ secrets.SSH_REMOTE_IP}} >> ~/.ssh/known_hosts
    
      - name: Install rsync
        run: sudo apt-get install -y rsync
        
      - name: Deploy via rsync    
        run: |
            
            rsync -avz --rsync-path="mkdir -p ${STAGING_DIRECTORY}" --no-times --no-perms --no-group -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no" ./*.txt ${{secrets.SSH_USER}}@${{secrets.SSH_REMOTE_IP}}:${STAGING_DIRECTORY}
    
    #   - name: Rebuild containers
    #     run: |
    #         ssh -o StrictHostKeyChecking=no -p ${{secrets.SSH_PORT}} ${{secrets.SSH_USER}}@${{secrets.SSH_REMOTE_IP}} << EOF
    #         cd ${{secrets.SSH_REMOTE_PATH}}            
            
            
    #         echo "${{secrets.DOCKERHUB_TOKEN}}" | docker login -u "${{secrets.DOCKERHUB_USERNAME}}" --password-stdin
    #         docker compose -f docker-compose.deploy.yml down --rmi all -v  || true

    #         docker compose -f docker-compose.deploy.yml --env-file .default.env  build
    #         docker compose -f docker-compose.deploy.yml --env-file .default.env  up -d
    #         docker compose -f docker-compose.deploy.yml --env-file .default.env exec products-api dotnet console/Backend.Core.Console.dll --update-db
    #         docker compose -f docker-compose.deploy.yml --env-file .default.env exec products-api dotnet console/Backend.Core.Console.dll --fetch

    #         docker system prune -f 
